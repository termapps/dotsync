env:
  NAME: dotsync
name: Release
on:
  push:
    tags: [v*]
jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
  read-version:
    name: Read version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Read version
        id: version
        env:
          REF: ${{ github.ref }}
        shell: bash
        run: echo "VERSION=${REF/refs\/tags\//}" >> $GITHUB_OUTPUT
  build-upload:
    name: Build & Upload
    needs: [create-release, read-version]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          # - i686-pc-windows-gnu
          # - x86_64-pc-windows-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.68.0
          target: ${{ matrix.target }}
          override: true
      - name: Install linker
        if: matrix.target == 'i686-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install gcc-multilib
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }} --release
      - name: Set variables
        id: vars
        env:
          BUILD_NAME: ${{ env.NAME }}-${{ needs.read-version.outputs.version }}-${{ matrix.target }}
        shell: bash
        run: echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_OUTPUT
      - name: Ready artifacts
        env:
          TARGET: ${{ matrix.target }}
        shell: bash
        run: |
          mkdir upload
          cp target/$TARGET/release/$NAME LICENSE upload
      - name: Compress artifacts
        uses: vimtor/action-zip@v1
        with:
          files: upload/
          recursive: true
          dest: upload.zip
      - name: Upload artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./upload.zip
          asset_name: ${{ steps.vars.outputs.BUILD_NAME }}.zip
          asset_content_type: application/zip
      - name: Calculate checksum
        id: calculate
        shell: bash
        run: |
          echo $(sha256sum upload.zip | cut -d ' ' -f 1) > sha256sum.txt
      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./sha256sum.txt
          asset_name: ${{ steps.vars.outputs.BUILD_NAME }}_sha256sum.txt
          asset_content_type: text/plain
